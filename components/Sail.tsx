/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./public/sail.gltf -t 
*/

import * as THREE from "three";
import React, { Suspense, useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    membrane_1_top: THREE.Mesh;
    membrane_1_bottom: THREE.Mesh;
    pole_1: THREE.Mesh;
    pole_2: THREE.Mesh;
    pole_3: THREE.Mesh;
    pole_4: THREE.Mesh;
  };
  materials: {
    ["Default OBJ"]: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model({
  texture,
  ...props
}: {
  texture: number;
  props?: React.JSX.IntrinsicElements["group"];
}) {
  const { nodes, materials } = useGLTF("/sail.gltf") as GLTFResult;
  const map1 = new THREE.TextureLoader().load("textures/aquamarine.jpg");
  map1.wrapS = THREE.RepeatWrapping;
  map1.wrapT = THREE.RepeatWrapping;
  map1.repeat.set(1, 1);

  const map2 = new THREE.TextureLoader().load("textures/aussie_green.jpg");
  map2.wrapS = THREE.RepeatWrapping;
  map2.wrapT = THREE.RepeatWrapping;
  map2.repeat.set(1, 1);
  console.log("texture::", texture, texture == 1);
  const ref = useRef<THREE.Mesh>(null);
  return (
    <group scale={[0.2, 0.2, 0.2]} dispose={null}>
      <mesh
        ref={ref}
        castShadow
        geometry={nodes.membrane_1_top.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        position={[0, 0.005, 0]}
      >
        <meshStandardMaterial
          map={texture === 1 ? map1 : map2}
          roughness={0.5}
          needsUpdate
        />
      </mesh>
      <mesh
        ref={ref}
        castShadow
        geometry={nodes.membrane_1_bottom.geometry}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshStandardMaterial
          map={texture === 1 ? map1 : map2}
          roughness={0.5}
          needsUpdate
        />
      </mesh>
      <mesh
        castShadow
        geometry={nodes.pole_1.geometry}
        material={materials["Default OBJ"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        geometry={nodes.pole_2.geometry}
        material={materials["Default OBJ"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        geometry={nodes.pole_3.geometry}
        material={materials["Default OBJ"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        geometry={nodes.pole_4.geometry}
        material={materials["Default OBJ"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload("/sail.gltf");
